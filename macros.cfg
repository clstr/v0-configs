[include stealthburner_leds.cfg]
    
#####################################################################
# Macros
#####################################################################
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("0")|int %}
  {% set outer_wall_volumetric_speed = params.OUTER_WALL_VOLUMETRIC|default("15")|int %}
  {% set bed_type = params.BED_TYPE|string %}
  
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  
  SET_PIN PIN=caselight VALUE=.33
  
  M109 S150 # preheat nozzle
  
  # Homes the printer, sets absolute positioning and updates the leds.
  STATUS_HOMING
  G28
  G90
  
  # Test Message Logs
  DISPLAYTEXT TEXT="target_chamber: {target_chamber}c"
  DISPLAYTEXT TEXT="target_bed: {target_bed}c"
  DISPLAYTEXT TEXT="outer_wall_volumetric_speed: {outer_wall_volumetric_speed}"
  DISPLAYTEXT TEXT="bed_type {bed_type}"
  
  # Chamber Heating Conditions
  {% if target_chamber != 0 %}
    DISPLAYTEXT TEXT="Heatsoak: {target_chamber}c"
    
    SET_PIN PIN=caselight VALUE=1
    STATUS_HEATING
    
    G1 X{x_wait} Y{y_wait} Z10 F9000
    M190 S120
    
    # This routine will bring up any fans slowly to 100%. 
    # Prevents Klipper from freaking out about heater expected rate.
    HEATSOAK_CHAMBER TEMP={target_chamber}
    M106 S128
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
    
    M190 S{target_bed} # Set printing temps
  {% elif bed_type != "Cool Plate" and target_chamber == 0 %}
    DISPLAYTEXT TEXT="No Chamber heating"
    
    SET_PIN PIN=caselight VALUE=0.50
    STATUS_HEATING
    
    G1 X{x_wait} Y{y_wait} Z15 F9000
    M190 S{target_bed}
    
    DISPLAYTEXT TEXT="Bed Soak (5 Min)"
    G4 P300000
  {% elif bed_type == "Cool Plate" and target_chamber == 0 %}
    DISPLAYTEXT TEXT="No Bedheating"
    SET_PIN PIN=caselight VALUE=0.50
  {% endif %}
  
  STATUS_HEATING
  M107
  
  # Move to priming position
  G1 X1.0 Y1.0 F18000
  G1 Z0.1
  
  M109 S{target_extruder}
  
  # Prime Line
  G0 Z0.2 F18000
  G0 X110.0 E15.0 F{outer_wall_volumetric_speed/(0.3*0.5) * 60}
  G92 E0.0
  G90
  
  DISPLAYTEXT TEXT="Printing. . ."
  STATUS_PRINTING
   
[gcode_macro PRINT_END]
gcode:
  {% set print_max_z = params.PRINT_MAX_Z|int %}
  M400                           ; wait for buffer to clear
  G92 E0                         ; zero the extruder
  G1 E-4.0 F3600                 ; retract filament
  
  TURN_OFF_HEATERS
  PARK_AT_PRINT_END PRINT_MAX_Z={print_max_z}

  M107                           ; turn off fan
  M84                            ; Disable motors
  
  DISPLAYTEXT TEXT="Print Finished!"
  SET_PIN PIN=caselight VALUE=0

# Hacky way to get heatsoaking
# looks through 100 times while raising any fans set to 100% to prevent heater issues.
# this would work better if `break` was implemented. newer jinja version support this, but
# klipper project needs to add/support it.
[gcode_macro HEATSOAK_CHAMBER]
description: Heatsoak chamber to a specific temperature with a timeout
gcode:
  {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}

  {% for COUNT in range(1, 100) %}
      {% set CURRENT_TEMP = printer["temperature_sensor chamber"].temperature|float %}
      {% if CURRENT_TEMP < SETPOINT_TEMP %}
          _WAIT_CHAMBER_TEMP TEMP={SETPOINT_TEMP}
      {% endif %}
  {% endfor %}

[gcode_macro _WAIT_CHAMBER_TEMP]
gcode:
  {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
  {% set CURRENT_POWER = printer.heater_bed.power %}
  {% set CURRENT_FAN = printer['fan_generic bento_fan'].speed|float %}
  {% set NEW_FAN = CURRENT_FAN %}
  #RESPOND MSG="Current power: {CURRENT_POWER}, Current fan: {CURRENT_FAN}"
  
  {% if CURRENT_POWER < 0.95 %}            
      {% if CURRENT_FAN < 1.0 %}
          {% set NEW_FAN = CURRENT_FAN + 0.02 %}
      {% endif %}
  {% else %}
      {% if CURRENT_FAN > 0.0 %}
          {% set NEW_FAN = CURRENT_FAN - 0.02 %}
      {% endif %}
  {% endif %}
  
  {% if NEW_FAN > 1.0 %}
      {% set NEW_FAN = 1.0 %}
   {% elif NEW_FAN < 0.0 %}
      {% set NEW_FAN = 0.0 %}
  {% endif %}
  
  {% if CURRENT_FAN != NEW_FAN %}
      SET_FAN_SPEED FAN=bento_fan SPEED={NEW_FAN}
  {% endif %}
  G4 P3000

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
  # Speed
  {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
  # Iterations
  {% set iterations = params.ITERATIONS|default(5)|int %}
  # Acceleration
  {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
  # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
  {% set bound = params.BOUND|default(20)|int %}
  # Size for small pattern box
  {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
  
  # Large pattern
  # Max positions, inset by BOUND
  {% set x_min = printer.toolhead.axis_minimum.x + bound %}
  {% set x_max = printer.toolhead.axis_maximum.x - bound %}
  {% set y_min = printer.toolhead.axis_minimum.y + bound %}
  {% set y_max = printer.toolhead.axis_maximum.y - bound %}

  # Small pattern at center
  # Find X/Y center point
  {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
  {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
  
  # Set small pattern box around center point
  {% set x_center_min = x_center - (smallpatternsize/2) %}
  {% set x_center_max = x_center + (smallpatternsize/2) %}
  {% set y_center_min = y_center - (smallpatternsize/2) %}
  {% set y_center_max = y_center + (smallpatternsize/2) %}

  # Save current gcode state (absolute/relative, etc)
  SAVE_GCODE_STATE NAME=TEST_SPEED
  
  # Output parameters to g-code terminal
  { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
  
  # Home and get position for comparison later:
      M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
      G28
      # QGL if not already QGLd (only if QGL section exists in config)
      {% if printer.configfile.settings.quad_gantry_level %}
          {% if printer.quad_gantry_level.applied == False %}
              QUAD_GANTRY_LEVEL
              G28 Z
          {% endif %}
      {% endif %} 
      # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
      G90
      G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
      M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
      G28 X Y
      G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
      G4 P1000 
      GET_POSITION

  # Go to starting position
  G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

  # Set new limits
  SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}

  {% for i in range(iterations) %}
      # Large pattern diagonals
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_max} Y{y_max} F{speed*60}
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
      G0 X{x_min} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
      
      # Large pattern box
      G0 X{x_min} Y{y_min} F{speed*60}
      G0 X{x_min} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_max} F{speed*60}
      G0 X{x_max} Y{y_min} F{speed*60}
  
      # Small pattern diagonals
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_max} Y{y_center_max} F{speed*60}
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
      G0 X{x_center_min} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
      
      # Small patternbox
      G0 X{x_center_min} Y{y_center_min} F{speed*60}
      G0 X{x_center_min} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_max} F{speed*60}
      G0 X{x_center_max} Y{y_center_min} F{speed*60}
  {% endfor %}

  # Restore max speed/accel/accel_to_decel to their configured values
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio}

  # Re-home and get position again for comparison:
      M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
      G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
      # Go to XY home positions (in case your homing override leaves it elsewhere)
      G90
      G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
      G4 P1000 
      GET_POSITION

  # Restore previous gcode state (absolute/relative, etc)
  RESTORE_GCODE_STATE NAME=TEST_SPEED

###########################################################################
# Helper macro that will walk the user through a cold-pull
#
# Assumes the bowden tube is removed from the toolhead and the extruder
# is loaded with about 300mm of filament. The use must have access to the
# filament to firmly pull when asked
#
# Params:
#  MATERIAL=nylon|pla|abs|petg	Starting temp defaults
#  HOT_TEMP			Initial high temp
#  COLD_TEMP			Temp to cool too to help release filament
#  MIN_EXTRUDE_TEMP		Temp to which the extruder will keep nozzle pressurized
#  PULL_TEMP			Temp to perform the cold pull
#  PULL_SPEED			Speed in mm/s of extruder movement to help manual pull
#  CLEAN_LENGTH			Amount of filament to extrude to prime extruder/nozzle
#  EXTRUDE_SPEED		Speed in mm/s to perform extrude operations
#
# _CLIENT_EXTRUDE length={clean_length} speed={extrude_speed}

[gcode_macro COLD_PULL]
description: Guide you through the process of cleaning your extruder with a cold pull
gcode:
  {% set material = params.MATERIAL|default("pla")|string|upper %}
  {% set materials = {
      'NYLON': {'hot_temp': 260, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
      'PLA':   {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 160},
      'ABS':   {'hot_temp': 255, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
      'PETG':  {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 180}
  } %}
  {% if material not in materials %}
      {action_raise_error("Unknown material. Valid types are: Nylon, ABS, PLA, PETG")}
  {% endif %}

  # Allow individual temperature overrides. Coded like this so Mainsail can parse options
  {% set hot_temp = params.HOT_TEMP|default('')|int %}
  {% set cold_temp = params.COLD_TEMP|default('')|int %}
  {% set pull_temp = params.PULL_TEMP|default('')|int %}
  {% set min_extrude_temp = params.MIN_EXTRUDE_TEMP|default('')|int %}
  {% set hot_temp = (hot_temp if hot_temp > 0 else materials.get(material).hot_temp)|int %}
  {% set cold_temp = (cold_temp if cold_temp > 0 else materials.get(material).cold_temp)|int %}
  {% set pull_temp = (pull_temp if pull_temp > 0 else materials.get(material).pull_temp)|int %}
  {% set min_extrude_temp = (min_extrude_temp if min_extrude_temp > 0 else materials.get(material).min_extrude_temp)|int %}

  {% set pull_speed = params.PULL_SPEED|default(10)|int %}
  {% set clean_length = params.CLEAN_LENGTH|default(25)|int %}
  {% set extrude_speed = params.EXTRUDE_SPEED|default(1.5)|float %}

  {% set ns = namespace(stuff_points=[], cool_points=[]) %}

  {% for temp in range(hot_temp + 1, cold_temp - 1, -1) %}
      {% if temp % 10 == 0 %}
          {% if temp > min_extrude_temp %}
              {% set ns.stuff_points = ns.stuff_points + [temp] %}
          {% elif temp < min_extrude_temp %}
              {% set ns.cool_points = ns.cool_points + [temp] %}
          {% endif %}
      {% endif %}
  {% endfor %}

  DISPLAYTEXT TEXT='{"Cold Pull with pull_temp=%d\u00B0C, hot_temp=%d\u00B0C, min_extrude_temp=%d\u00B0C, cold_temp=%d\u00B0C" % (pull_temp, hot_temp, min_extrude_temp, cold_temp)}'

  DISPLAYTEXT TEXT='{"Heating extruder to %d\u00B0C" % hot_temp}'
  SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={hot_temp}
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={hot_temp - 2} MAXIMUM={hot_temp + 2}

  # Ensure the nozzle id completely full
  DISPLAYTEXT TEXT="Cleaning nozzle tip with {clean_length}mm of filament"
  _CLIENT_EXTRUDE length={clean_length} speed={extrude_speed}

  # Begin the cooling ramp
  DISPLAYTEXT TEXT="Allowing extruder to cool..."
  SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={cold_temp}
  M106 S255			# 100% part fan to cool faster

  # While filament can still extrude keep the nozzle completely full
  {% for temp in ns.stuff_points %}
      TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
      DISPLAYTEXT TEXT='{"Stuffing nozzle at %d\u00B0C" % temp}'
      _CLIENT_EXTRUDE length=1 speed={extrude_speed}
  {% endfor %}

  # Give some feedback on cooling process
  DISPLAYTEXT TEXT='{"Waiting for extruder to completely cool to %d\u00B0C..." % cold_temp}'
  {% for temp in ns.cool_points %}
      TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
      DISPLAYTEXT TEXT='{"Nozzle at %d\u00B0C" % temp}'
  {% endfor %}
  TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={cold_temp}

  # Re-warm
  M107			# Part fan off
  DISPLAYTEXT TEXT='{"Re-warming extruder to %d\u00B0C" % pull_temp}'
  SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={pull_temp}

  # The manual cold-pull
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp - 10}
  M300 P500
  DISPLAYTEXT TEXT="Get ready to pull..."
  TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp}
  M300 P100
  DISPLAYTEXT TEXT=">>>>> PULL NOW <<<<<"

  # Retract 150 mm at moderate speed (user should pull too)
  _CLIENT_EXTRUDE length=-150 speed={pull_speed}
  DISPLAYTEXT TEXT="Cold pull is successful if you can see the shape of the nozzle at the filament end"

  # Heater completely off
  SET_HEATER_TEMPERATURE HEATER="extruder"

[gcode_macro ask_to_skip_bed_soak]
description: This prompt will ask if you want to skip bed soak (helpful to save time if bed was already heated).
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin ! Question !"
  RESPOND TYPE=command MSG="action:prompt_text Do you want to skip bed soak?"
  RESPOND TYPE=command MSG="action:prompt_footer_button Yes|BED_SOAK_WAIT MINS=5|primary"
  RESPOND TYPE=command MSG="action:prompt_footer_button No|BED_SOAK_WAIT MINS=0|error"
  RESPOND TYPE=command MSG="action:prompt_show"
  
[gcode_macro BED_SOAK_WAIT]
description: Soaks the bed
gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  {% set target_mins = params.MINS|int %}
  {% set ms = target_mins * 60000%}
  DISPLAYTEXT TEXT="Waiting for {target_mins} mins."
  G4 P{ms}




    